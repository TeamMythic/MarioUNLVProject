//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/BasicInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BasicInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BasicInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BasicInput"",
    ""maps"": [
        {
            ""name"": ""BasicInputMapping"",
            ""id"": ""da76440b-0f2a-423e-bd8c-68fda77fb059"",
            ""actions"": [
                {
                    ""name"": ""Running"",
                    ""type"": ""Button"",
                    ""id"": ""003641c2-d1a3-44ff-bb1f-7ec387854a60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""626a28c6-6195-4a82-bbf8-a75cfc808898"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""8d80fa2a-9d01-4b49-9a9f-7a264de12d47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7301e2cf-fb42-4a66-b0d1-38313a2b91cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReleaseJump"",
                    ""type"": ""Button"",
                    ""id"": ""c8564f1d-3a91-4c62-9de8-60a12a86c6d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a4ec4c5-c65a-44df-8565-825a53384676"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df718429-c57c-4199-b51b-5063e1e1cf00"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""13d467c0-50d2-46fc-827a-dace8462f46c"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6f506fd8-f848-4d19-a443-b5f9fd34c876"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""016f33eb-1a13-42ac-95e4-6e92a307500a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""995fd7d1-f691-4fd6-a7ae-8d001dab8369"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4591a13f-e028-44ee-b2a8-82008980b87c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08418e79-fd44-4b37-82de-b5c323ac9b02"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReleaseJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicInputMapping
        m_BasicInputMapping = asset.FindActionMap("BasicInputMapping", throwIfNotFound: true);
        m_BasicInputMapping_Running = m_BasicInputMapping.FindAction("Running", throwIfNotFound: true);
        m_BasicInputMapping_Move = m_BasicInputMapping.FindAction("Move", throwIfNotFound: true);
        m_BasicInputMapping_Throw = m_BasicInputMapping.FindAction("Throw", throwIfNotFound: true);
        m_BasicInputMapping_Jump = m_BasicInputMapping.FindAction("Jump", throwIfNotFound: true);
        m_BasicInputMapping_ReleaseJump = m_BasicInputMapping.FindAction("ReleaseJump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicInputMapping
    private readonly InputActionMap m_BasicInputMapping;
    private IBasicInputMappingActions m_BasicInputMappingActionsCallbackInterface;
    private readonly InputAction m_BasicInputMapping_Running;
    private readonly InputAction m_BasicInputMapping_Move;
    private readonly InputAction m_BasicInputMapping_Throw;
    private readonly InputAction m_BasicInputMapping_Jump;
    private readonly InputAction m_BasicInputMapping_ReleaseJump;
    public struct BasicInputMappingActions
    {
        private @BasicInput m_Wrapper;
        public BasicInputMappingActions(@BasicInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Running => m_Wrapper.m_BasicInputMapping_Running;
        public InputAction @Move => m_Wrapper.m_BasicInputMapping_Move;
        public InputAction @Throw => m_Wrapper.m_BasicInputMapping_Throw;
        public InputAction @Jump => m_Wrapper.m_BasicInputMapping_Jump;
        public InputAction @ReleaseJump => m_Wrapper.m_BasicInputMapping_ReleaseJump;
        public InputActionMap Get() { return m_Wrapper.m_BasicInputMapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicInputMappingActions set) { return set.Get(); }
        public void SetCallbacks(IBasicInputMappingActions instance)
        {
            if (m_Wrapper.m_BasicInputMappingActionsCallbackInterface != null)
            {
                @Running.started -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnRunning;
                @Running.performed -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnRunning;
                @Running.canceled -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnRunning;
                @Move.started -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnMove;
                @Throw.started -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnThrow;
                @Jump.started -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnJump;
                @ReleaseJump.started -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnReleaseJump;
                @ReleaseJump.performed -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnReleaseJump;
                @ReleaseJump.canceled -= m_Wrapper.m_BasicInputMappingActionsCallbackInterface.OnReleaseJump;
            }
            m_Wrapper.m_BasicInputMappingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Running.started += instance.OnRunning;
                @Running.performed += instance.OnRunning;
                @Running.canceled += instance.OnRunning;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ReleaseJump.started += instance.OnReleaseJump;
                @ReleaseJump.performed += instance.OnReleaseJump;
                @ReleaseJump.canceled += instance.OnReleaseJump;
            }
        }
    }
    public BasicInputMappingActions @BasicInputMapping => new BasicInputMappingActions(this);
    public interface IBasicInputMappingActions
    {
        void OnRunning(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnReleaseJump(InputAction.CallbackContext context);
    }
}
